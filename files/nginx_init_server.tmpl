#!/bin/bash
sleep 30
sudo apt update -y

### Nginx configurations ###
sudo apt install nginx -y
sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -subj "/C=US/ST=Ohio/L=Col/O=SE/OU=SE_Test/CN=server.proxy.com" -keyout /etc/ssl/private/server.proxy.com.key -out /etc/ssl/certs/server.proxy.com.crt
sudo openssl dhparam -out /etc/nginx/dhparam.pem 2048
cat << 'EOF' > /etc/nginx/snippets/self-signed.conf
ssl_certificate /etc/ssl/certs/server.proxy.com.crt;
ssl_certificate_key /etc/ssl/private/server.proxy.com.key;
EOF

echo "Adding SSL/TLS settings"
cat << 'EOF' > /etc/nginx/snippets/ssl-params.conf
ssl_protocols TLSv1.2;
ssl_prefer_server_ciphers on;
ssl_dhparam /etc/nginx/dhparam.pem;
ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
ssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0
ssl_session_timeout  10m;
ssl_session_cache shared:SSL:10m;
ssl_session_tickets off; # Requires nginx >= 1.5.9
ssl_stapling on; # Requires nginx >= 1.3.7
ssl_stapling_verify on; # Requires nginx => 1.3.7
resolver 8.8.8.8 8.8.4.4 valid=300s;
resolver_timeout 5s;
# Disable strict transport security for now. You can uncomment the following
# line if you understand the implications.
# add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
add_header X-Frame-Options DENY;
add_header X-Content-Type-Options nosniff;
add_header X-XSS-Protection "1; mode=block";
EOF

echo "Added 443 configuration"
cat << EOF > /etc/nginx/sites-available/default
##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
	listen 80 default_server;
	listen [::]:80 default_server;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /var/www/html;

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;

	server_name _;

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files \$uri \$uri/ =404;
	}

	# pass PHP scripts to FastCGI server
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php-fpm (or other unix sockets):
	#	fastcgi_pass unix:/run/php/php7.4-fpm.sock;
	#	# With php-cgi (or other tcp sockets):
	#	fastcgi_pass 127.0.0.1:9000;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}
#/etc/nginx/sites-available/example.com
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    include snippets/self-signed.conf;
    include snippets/ssl-params.conf;

    server_name server.proxy.com www.server.proxy.com;

    root /var/www/html;
    index index.html index.htm index.nginx-debian.html;

}
server {
    listen 4443 ssl http2;
    include snippets/self-signed.conf;
    include snippets/ssl-params.conf;

    server_name server.proxy.com www.server.proxy.com;

    root /var/www/html;
    index index.html index.htm index.nginx-debian.html;

}
EOF

cat << EOF > /var/www/html/index.nginx-debian.html
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
    body {
        width: 35em;
        margin: 0 auto;
        font-family: Tahoma, Verdana, Arial, sans-serif;
    }
</style>
</head>
<body>
<h1>Welcome to ${aws_region} APP Zone application, this sits behind the exposed Lattice Service!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
EOF


echo "Checking Nginx config with 'nginx -t'"
nginx -t

echo "Re-starting Nginx with 'systemctl restart nginx'"
systemctl restart nginx


### Locust configs ###
sudo apt install python3-pip -y
sudo pip3 install locust
cat << 'EOF' > /home/ubuntu/locustfile.py
import random,string
from locust import HttpUser, task

class proxyTesting(HttpUser):
    host = "https://ubuntu.com"

    @task
    def get(self):
        self.client.get("/")

EOF
sudo sh -c 'echo export HTTP_PROXY="lsimon.proxy.com:11443" >> /etc/environment'
sudo sh -c 'echo export HTTPS_PROXY="lsimon.proxy.com:11443" >> /etc/environment'
sudo sh -c 'echo "Acquire::http::Proxy \"http://lsimon.proxy.com:11443/\";" >> /etc/apt/apt.conf.d/proxy.conf'
sudo sh -c 'echo "Acquire::https::Proxy \"https://lsimon.proxy.com:11443/\";" >> /etc/apt/apt.conf.d/proxy.conf'

echo "*****+++++=====  CLOUD INIT SCRIPT FINISHED  *****+++++====="